{"version":3,"sources":["components/Graficasdelineas.js","components/MapaEnVivo.js","App.js","serviceWorker.js","index.js"],"names":["Graficas","useState","labels","datasets","label","data","backgroundColor","charData","setCharData","className","key","JSON","stringify","options","responsive","onClick","objectoNuevo","merge","Math","random","MapEnVivo","Map","center","lat","lng","zoom","TileLayer","url","attribution","App","MapaEnVivo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAsJeA,EAlJE,WAAO,IAAD,EACWC,mBAAS,CACvCC,OAAQ,CACN,QACA,SACA,YACA,SACA,UACA,SACA,WAEFC,SAAU,CACR,CACEC,MAAO,iBACPC,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzBC,gBAAiB,CACf,uBACA,uBACA,sBACA,qBACA,YACA,SACA,aAtBa,mBACdC,EADc,KACJC,EADI,KAuFrB,OACE,oCACE,wCACA,yBAAKC,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC,WAAD,CACEC,IAAKC,KAAKC,UAAUL,EAASJ,SAAS,GAAGE,MACzCA,KAAME,EACNM,QAAS,CACPC,YAAY,MAIlB,yBAAKL,UAAU,SACb,kBAAC,MAAD,CACEC,IAAKC,KAAKC,UAAUL,EAASJ,SAAS,GAAGE,MACzCA,KAAME,EACNM,QAAS,CACPC,YAAY,OAKpB,yBAAKL,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC,QAAD,CACEC,IAAKC,KAAKC,UAAUL,EAASJ,SAAS,GAAGE,MACzCA,KAAME,EACNM,QAAS,CACPC,YAAY,MAIlB,yBAAKL,UAAU,SACb,kBAAC,MAAD,CACEC,IAAKC,KAAKC,UAAUL,EAASJ,SAAS,GAAGE,MACzCA,KAAME,EACNM,QAAS,CACPC,YAAY,OAgBpB,4BAAQC,QA5ES,WAGnB,IAAMC,EAAY,2BACbT,GADa,IAEhBJ,SAAUc,gBAAMV,EAASJ,SAAU,CACjC,CACEE,KAAM,CACY,EAAhBa,KAAKC,SACW,EAAhBD,KAAKC,SACW,EAAhBD,KAAKC,SACW,EAAhBD,KAAKC,SACW,EAAhBD,KAAKC,SACW,EAAhBD,KAAKC,SACW,EAAhBD,KAAKC,eAMbX,EAAYQ,KAwDV,mB,kBCpISI,G,OAVG,WACd,OACI,oCACA,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAACC,IAAI,cAAcC,IAAI,eAAgBC,KAAM,GAC1D,kBAACC,EAAA,EAAD,CAAWC,IAAI,qDAAqDC,YAAY,+E,OCWzEC,MAXf,WACE,OACE,yBAAKpB,UAAU,aAEb,kBAAC,EAAD,MACA,kBAACqB,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.02a8048b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Doughnut, Bar, Radar, Pie } from \"react-chartjs-2\";\nimport { merge } from \"lodash\";\n\nconst Graficas = () => {\n  const [charData, setCharData] = useState({\n    labels: [\n      \"Lunes\",\n      \"Martes\",\n      \"Miercoles\",\n      \"Jueves\",\n      \"Viernes\",\n      \"Sabado\",\n      \"Domingo\",\n    ],\n    datasets: [\n      {\n        label: \"Ventas por dia\",\n        data: [1, 2, 3, 4, 5, 6, 7],\n        backgroundColor: [\n          \"rgba(75,192,192,0.6)\", // Este es para lunes\n          \"rgba(100,19,172,0.6)\", // Este es para martes\n          \"rgba(75,192,19,0.2)\", // Este es para miercoles\n          \"rgba(75,92,92,0.9)\", // Este es para jueves\n          \"aliceblue\", // Este es para viernes\n          \"yellow\", // Este es para sabado\n          \"green\", // Este es para domingo\n        ],\n      },\n    ],\n  });\n\n  // No necesitas esto. En vez, declara el estado inicial.\n  // useEffect(() => {\n  //  chart();\n  // }, []);\n\n  // Es mejor que los nombres de funciones sean verbos, no sustantivos\n  // const cambiarDatos = () => {\n  //   var nuevo = [];\n  //   document\n  //     .getElementById(\"inputfile\")\n  //     .addEventListener(\"change\", function () {\n  //       var fr = new FileReader();\n  //       fr.onload = function () {\n  //         document.getElementById(\"output\").textContent = fr.result;\n  //         console.log(fr.result.split(\",\"));\n  //         const arrStr = fr.result.split(\",\");\n  //         nuevo = arrStr.map((i) => Number(i));\n  //         console.log(nuevo);\n  //       };\n  //       console.log(nuevo);\n  //       fr.readAsText(this.files[0]);\n  //     });\n  //     console.log(nuevo);\n\n  //   // setCharData cambia todo el objecto, asi que tienes que clonarlo o volver a construirlo.\n  //   // Usa merge para unir los objectos (https://lodash.com/docs/4.17.15#merge).\n  //   const objectoNuevo = {\n  //     ...charData, // Esto se llama operador rest (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters)\n  //     datasets: merge(charData.datasets, [\n  //       {\n  //         data: nuevo,//\n  //       },\n  //     ]),\n  //   };\n\n  //   setCharData(objectoNuevo);\n  // };\n  const cambiarDatos = () => {\n    // setCharData cambia todo el objecto, asi que tienes que clonarlo o volver a construirlo.\n    // Usa merge para unir los objectos (https://lodash.com/docs/4.17.15#merge).\n    const objectoNuevo = {\n      ...charData, // Esto se llama operador rest (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters)\n      datasets: merge(charData.datasets, [\n        {\n          data: [\n            Math.random() * 1,\n            Math.random() * 2,\n            Math.random() * 3,\n            Math.random() * 4,\n            Math.random() * 5,\n            Math.random() * 6,\n            Math.random() * 7\n          ]\n        }\n      ])\n    };\n\n    setCharData(objectoNuevo);\n  };\n  return (\n    <>\n      <h1>Diagrama</h1>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <Doughnut\n            key={JSON.stringify(charData.datasets[0].data)}\n            data={charData}\n            options={{\n              responsive: true,\n            }}\n          />\n        </div>\n        <div className=\"col-6\">\n          <Bar\n            key={JSON.stringify(charData.datasets[0].data)}\n            data={charData}\n            options={{\n              responsive: true,\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <Radar\n            key={JSON.stringify(charData.datasets[0].data)}\n            data={charData}\n            options={{\n              responsive: true,\n            }}\n          />\n        </div>\n        <div className=\"col-6\">\n          <Pie\n            key={JSON.stringify(charData.datasets[0].data)}\n            data={charData}\n            options={{\n              responsive: true,\n            }}\n          />\n        </div>\n\n        {/* <div>\n          <input\n            type=\"file\"\n            name=\"inputfile\"\n            id=\"inputfile\"\n            onClick={cambiarDatos}\n          />\n          <br />\n          <pre id=\"output\"></pre>\n        </div> */}\n      </div>\n      <button onClick={cambiarDatos}> Cambiar Dato</button>\n    </>\n  );\n};\n\nexport default Graficas;\n","import React from 'react';\nimport {Map, TileLayer} from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nconst MapEnVivo = () => {\n    return ( \n        <>\n        <Map center={{lat:'-16.5285372',lng:'-62.5942999'}} zoom={6} >\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\n        </Map>\n        </>\n     );\n}\n \nexport default MapEnVivo;","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Graficas from \"./components/Graficasdelineas\";\nimport MapaEnVivo from \"./components/MapaEnVivo\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n     \n      <Graficas />\n      <MapaEnVivo />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}